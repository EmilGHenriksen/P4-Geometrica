//should a length be required at declaration?
point[] points;

//list() mylist = ???

//[]int numbers;
int[] numbers;
//int []numbers;
//int numbers[];

int[][] numbers2d;
//int numbers2d[][];

numbers2d[1][6] IS 3;



points[0] IS newpoint(1, 2);

point a IS newpoint(7, 7);
points[4] IS a; //copies the contents of a into the last element of the array

point b IS points[2]; 



//initiated arrays


int[] initiatedInts IS [2, 4, -17];
int[][] initiatedInts IS [[2, 4, -17], [5, 26, 1], [3, -3, 2]];


//int[] initiatedInts IS {2, 4, -17};
//int[][] initiatedInts IS {{2, 4, -17}, {5, 26, 1}, {3, -3, 2}};


//int[] initiatedInts IS (2, 4, -17);
//int[][] initiatedInts IS ((2, 4, -17), (5, 26, 1), (3, -3, 2));


//int initiatedInts[2, 4, -17];     //inconsistent looks (no "IS")
//int[] initiatedInts IS 2, 4, -17; //could be ambiguous
//int initiatedInts IS [2, 4, -17]; //looks dynamically typed
    




point initiatedPoint IS newpoint(0, 0);
point[] initiatedPoints IS [newpoint(1,1), newpoint(17, 3), newpoint(2, 4)];


//adding and removing with "arrays" actually being lists
initiatedPoints.add(newpoint(0, 0));
initiatedPoints.remove(newpoint(0, 0));

initiatedPoints.add(newpoint(0, 0));
initiatedPoints.removeAt(3);



//multi-dimensional arrays
    //the size of each dimension shouldn't be written, but this is for illustration of the ordering
//float[2][4] myFloats IS [[1, 0, 1.1, -7], [-3, 2.2, -3.2, 234786]]; 
float[][] myFloats IS [[1, 0, 1.1, -7], [-3, 2.2, -3.2, 234786]]; 
      //or would it be [[1, 0], [1.1, -7], [-3, 2.2], [-3.2, 234786]] //array of 4 arrays of 2 floats?
      //size can't be defined at declaration

//or should it be this?
//[2][4]float myFloats IS [[1, 0, 1.1, -7], [-3, 2.2, -3.2, 234786]];