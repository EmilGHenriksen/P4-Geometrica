//should a length be required at declaration?
point points[];

//list() mylist = ???

//[]int numbers;
//int[] numbers;
//int []numbers;
int numbers[];

//int[][] numbers;
int numbers2d[][];

numbers2d[1][6] = 3;



points[0] = point(1, 2);

point a = point(7, 7);
points[4] = a; //copies the contents of a into the last element of the array

point b = points[2]; 



//initiated arrays


int initiatedInts[] IS [2, 4, -17];
int initiatedInts[][] IS [[2, 4, -17], [5, 26, 1], [3, -3, 2]];


//int initiatedInts[] IS {2, 4, -17};
//int initiatedInts[][] IS {{2, 4, -17}, {5, 26, 1}, {3, -3, 2}};


//int initiatedInts[] IS (2, 4, -17);
//int initiatedInts[][] IS ((2, 4, -17), (5, 26, 1), (3, -3, 2));


//int initiatedInts[2, 4, -17];     //inconsistent looks (no "IS")
//int initiatedInts[] IS 2, 4, -17; //could be ambiguous
//int initiatedInts IS [2, 4, -17]; //looks dynamically typed
    




point initiatedPoint = point(0, 0);
point initiatedPoints[] = [point(1,1), point(17, 3), point(2, 4)];


//adding and removing with "arrays" actually being lists
initiatedPoints.add(point(0, 0));
initiatedPoints.remove(point(0, 0));

initiatedPoints.add(point(0, 0));
initiatedPoints.removeAt(3);



//multi-dimensional arrays
    //the size of each dimension shouldn't be written, but this is for illustration of the ordering
float myFloats[2][4] = [[1, 0, 1.1, -7], [-3, 2.2, -3.2, 234786]]; 
      //or would it be [[1, 0], [1.1, -7], [-3, 2.2], [-3.2, 234786]] //array of 4 arrays of 2 floats?

//or should it be this?
//[2][4]float myFloats = [[1, 0, 1.1, -7], [-3, 2.2, -3.2, 234786]];