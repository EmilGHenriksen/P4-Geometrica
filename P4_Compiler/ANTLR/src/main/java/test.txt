/* Exercise description:
Tegn en 2nd-grads funktion
*/

//funktion given
float f(float x){
    float y IS -(x^2) + 3*x + 5;
    return y;
}

//---suggested solution 1 here---

float x IS -30;
while(x < 30){
    point p1 IS createPoint(x, f(x));
    point p2 IS createPoint(x+0.0001, f(x+0.0001));
    line current IS createLine(p1, p2);
    draw(current);

    x IS x + 0.0001;
}



//---suggested solution 2 here---
/*
float delta IS 1;
float startX IS -30;
float endX IS 30;

void drawFunc(float d, float start, float end){
    point[] points IS [ ];
    line[] lines IS [ ];

    //get points
    float x IS start;
    while(x < end){
        point nextPoint IS createPoint(x, f(x));
        points.add(nextPoint);
        x IS x + d;
    }
    //make into lines
    point previousPoint IS points[0];
    foreach(p in points){
        line nextLine IS createLine(previousPoint, p);
        lines.add(nextLine);
        previousPoint IS p;
    }
    //draw lines
    foreach(l in lines){
        draw(l);
    }
    return;
}
drawFunc(delta, startX, endX);
*/




//---suggested solution 3 here---
//only did right-half because it's so incredibly tedious
/*
point p0 IS createPoint(0.0, f(0.0));
point p1 IS createPoint(1.0, f(1.0));
point p2 IS createPoint(2.0, f(2.0));
point p3 IS createPoint(3.0, f(3.0));
point p4 IS createPoint(4.0, f(4.0));
point p5 IS createPoint(5.0, f(5.0));
point p6 IS createPoint(6.0, f(6.0));
point p7 IS createPoint(7.0, f(7.0));
point p8 IS createPoint(8.0, f(8.0));
point p9 IS createPoint(9.0, f(9.0));
//copied from above
point p10 IS createPoint(10.0, f(10.0));
point p11 IS createPoint(11.0, f(11.0));
point p12 IS createPoint(12.0, f(12.0));
point p13 IS createPoint(13.0, f(13.0));
point p14 IS createPoint(14.0, f(14.0));
point p15 IS createPoint(15.0, f(15.0));
point p16 IS createPoint(16.0, f(16.0));
point p17 IS createPoint(17.0, f(17.0));
point p18 IS createPoint(18.0, f(18.0));
point p19 IS createPoint(19.0, f(19.0));
//copied from top
point p20 IS createPoint(20.0, f(20.0));
point p21 IS createPoint(21.0, f(21.0));
point p22 IS createPoint(22.0, f(22.0));
point p23 IS createPoint(23.0, f(23.0));
point p24 IS createPoint(24.0, f(24.0));
point p25 IS createPoint(25.0, f(25.0));
point p26 IS createPoint(26.0, f(26.0));
point p27 IS createPoint(27.0, f(27.0));
point p28 IS createPoint(28.0, f(28.0));
point p29 IS createPoint(29.0, f(29.0));

point p30 IS createPoint(30.0, f(30.0));


//lines
draw(createLine(p0, p1));
draw(createLine(p1, p2));
draw(createLine(p2, p3));
draw(createLine(p3, p4));
draw(createLine(p4, p5));
draw(createLine(p5, p6));
draw(createLine(p6, p7));
draw(createLine(p7, p8));
draw(createLine(p8, p9));
draw(createLine(p9, p10));
//copied from above
draw(createLine(p10, p11));
draw(createLine(p11, p12));
draw(createLine(p12, p13));
draw(createLine(p13, p14));
draw(createLine(p14, p15));
draw(createLine(p15, p16));
draw(createLine(p16, p17));
draw(createLine(p17, p18));
draw(createLine(p18, p19));
draw(createLine(p19, p20));
//copied from "top"
draw(createLine(p20, p21));
draw(createLine(p21, p22));
draw(createLine(p22, p23));
draw(createLine(p23, p24));
draw(createLine(p24, p25));
draw(createLine(p25, p26));
draw(createLine(p26, p27));
draw(createLine(p27, p28));
draw(createLine(p28, p29));
draw(createLine(p29, p20));
*/